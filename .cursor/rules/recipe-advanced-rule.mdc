---
description: 
globs: 
alwaysApply: false
---
- 각 컴퍼넌트에 해당되는 기본 레시피 정보는 [recipesData.js](mdc:src/data/recipesData.js) 에서 확인
- [Recipe.jsx](mdc:src/components/commons/container/Recipe.jsx) 컴퍼넌트에 들어갈 '바이브 레시피' 정보들은 다음 카테고리 (아이디어 구체화, 기본 프롬프트, 심화 학습, 응용 프롬프트)로 분류한다.
- 아이디아 구체화: 개발을 모르는 사람의 입장에서도 인터랙티브 패턴의 아래 3가지 단계에 따라 일반어, 혹은 디자인 관련어로 설명. 언제, 무엇을, 어떻게 형식으로 설명
  - 인터랙티브 조건 (뷰포트에 들어왔을때, 특정 이벤트가 발생했을때)
  - 인터랙티브 대상 (글자, 컨테이너, 기타 UI)
  - 인터랙티브 속성 (위치, 크기, 색, 동적 생성 등)
- 기본 프롬프트: 위 내용을 구현하기 위해 LLM에 설명하기 위해 논리적으로 정확하게 정리된 프롬프트 작성. 컴퍼넌트의 역할 + 다루는 props를 언급하여 설명
- 심화학습
    - props 목록: 우선순위가 높은 props부터 이름, 변수 type, 역할 설명을 나눠서 설명, props의 type은 [PropController.jsx](mdc:src/components/commons/playground/PropController.jsx) 의 rederController 함수에 switch에 명식된 타입중 하나를 지정해
    - 필요 지식: 해당 컴퍼넌트의 핵심적인 역할에 관려하는 도메인 지식 설명 (javascript, css, react.js 등)

<!-- - 심화 학습
  - 컴포넌트 속성: 기본 프롬프트를 더 세밀하게 작성하기 위해 명시하면 좋을 Props와 그 역할을 테이블로 설명
  - 개발 문법 테이블: 프롬프트를 응용하기 위해 알면 좋을 개발 지식의 문법 / 역할 / 구분을 보여준 테이블. 아이디어 구체화, 기본 프롬프트에 등장한 내용을 구체화 하기 위한 내용들을 적어야함. -->

  아래는 키값 예시니깐 값이 아니라 오브젝트의 구조만 참고해.

  title: "Scramble Text",
  basicIdea:
    "특수 문자들이 무작위로 섞이면서 내가 원하는 텍스트가 등장하는 효과.",
  examples: ["로딩 화면", "콘텐츠 전환", "강조 효과"],
  expectedPrompt: "텍스트가 화면에 등장할 때, 각 글자를 무작위 특수문자에서 원래 텍스트로 순차적으로 변환해줘. 텍스트, 변환 속도, 딜레이 속도, 특수문자를 설정할 수 있게해줘.",

  <!-- advancedPrompt: "텍스트 변환 효과를 만들어주세요. 'text' 속성에는 최종적으로 보여줄 텍스트(예: '안녕하세요')를 입력하고, 'characters' 속성에는 변환 과정에서 사용할 특수문자들(예: '!@#$%^&*')을 지정해주세요. 각 글자가 특수문자에서 원래 글자로 바뀌는 시간은 'duration' 속성으로 조절하고(예: 1000ms), 글자들 사이의 변환 시간차는 'delay' 속성으로 설정할 수 있습니다(예: 50ms). 애니메이션이 모두 끝난 후 특정 동작을 실행하고 싶다면 'onComplete' 함수를 제공할 수 있습니다.", -->
  detailedProcess: [
    "1. 언제: 컴퍼넌트가 화면에 등장했을때",
    "2. 무엇을: 최종 텍스트를",
    "3. 어떻게: 특수문자가 무작위로 순서로 바뀌면서",
  ],
  advancedLearning: {
    propsList: [
      { name: "text", type: "string", description: "변환할 텍스트", required: true },
      { name: "scrambleChars", type: "string", description: "스크램블에 사용할 특수문자 집합", required: true, default: "!@#$%^&*()_+{}[]<>~" },
      { name: "delay", type: "number", description: "각 글자 변환 사이의, 글자 단위 지연 시간(ms)", required: true, default: 50 },
      { name: "duration", type: "number", description: "전체 애니메이션 지속 시간(ms)", required: true, default: 1000 },
      { name: "onComplete", type: "function", description: "애니메이션 완료 후 실행될 콜백 함수", required: false },
    ],
    requiredKnowledge: [
      {
        name: "String manipulation",
        role: "글자들을 하나씩 분리하고, 각 글자를 바꾸거나 합치는 작업",
        type: "JavaScript",
      },
      {
        name: "State management",
        role: "화면에 보여줄 글자(바뀌는 과정 포함)와 원래 글자를 기억하고 관리",
        type: "React",
      },
      {
        name: "Timers",
        role: "일정한 시간 간격으로 글자를 바꾸는 동작을 반복하고, 필요할 때 멈추는 기능",
        type: "JavaScript",
      },
    ],
  },
  ideaConcretization: {
    interactiveCondition: "텍스트가 화면에 나타날 때, 또는 특정 이벤트(클릭, 마우스 오버 등)가 발생했을 때",
    interactiveTarget: "텍스트의 각 글자",
    interactiveProperty: "글자의 내용이 무작위 특수문자에서 원래 문자로 점진적으로 변화함"
  }